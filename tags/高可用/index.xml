<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高可用 on SomethingCM</title>
    <link>https://SomethingCM.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
    <description>Recent content in 高可用 on SomethingCM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Mar 2016 16:59:47 +0800</lastBuildDate>
    
	<atom:link href="https://SomethingCM.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Openstack集群之Vip高可用</title>
      <link>https://SomethingCM.github.io/openstack/ha1/</link>
      <pubDate>Thu, 10 Mar 2016 16:59:47 +0800</pubDate>
      
      <guid>https://SomethingCM.github.io/openstack/ha1/</guid>
      <description>openstack高可用官方推荐组件：Pacemaker+corosync+haproxy
环境 系统centos7.2 三台主机 firewalld disable selinux disable 10.6.0.11 test-controller1 10.6.0.12 test-controller2 10.6.0.13 test-controller3  1.安装软件 相关软件 pacemaker pcs corosync fence-agents resource-agents libqb0 yum install pcs pacemaker corosync fence-agents-all resource-agents -y  2.启动pcsd服务 systemctl enable pcsd systemctl start pcsd  3.创建集群用户 安装pcsd时默认创建了用户hacluster 修改密码在所有集群节点上 echo &#39;Openstackcloud@#haproxy&#39; | passwd --stdin hacluster 集群各节点之间进行认证 [root@test-controller2 ~]# pcs cluster auth test-controller1 test-controller2 test-controller3 -u hacluster -p Openstackcloud@#haproxy --force test-controller3: Authorized test-controller2: Authorized test-controller1: Authorized 创建并启动名为openstack-cluste 的集群，其中controller1 controller2 为集群成员 [root@test-controller2 ~]# pcs cluster setup --force --name openstack-cluster test-controller1 test-controller2 test-controller3  4.</description>
    </item>
    
    <item>
      <title>Keepalived&#43;Haproxy</title>
      <link>https://SomethingCM.github.io/target/ha/</link>
      <pubDate>Tue, 19 May 2015 16:35:31 +0800</pubDate>
      
      <guid>https://SomethingCM.github.io/target/ha/</guid>
      <description>keepalived haproxy 介绍 Keepalived是HA cluster的一种实现方案，其以vrrp协议为实现基础，在N台具有相同功能的路由器或服务器中选出一个master或多个backup，这些路由器或服务器会共用一个对外提供服务的VIP。在此HA cluster集群中，master主机会发送组播来跟backup主机进行通信确认双方是否存活。当backup主机在指定的时间内没有收到vrrp组播报文则认为master主机宕机了，此时就会在所有的backup主机中根据vrrp协议来选举出新的master主机来保证服务的高可用性。 keepalived主要有三个模块，分别是ipvs wrapper、checkers和vrrp stack。ipvs wrapper模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。checkers负责健康检查，包括常见的各种检查方式。vrrp stack模块是来实现VRRP协议的。 HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。根据官方数据，其最高极限支持10G的并发。 HAProxy特别适用于那些负载特大的web站点， 这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。  1、软件安装 rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm yum install -y keepalived haproxy  2、软件配置 2.1、keepalived配置 Master global_defs { notification_email { chenmeng@yunzongnet.com } } vrrp_script chk_haproxy { script &amp;quot;/etc/keepalived/check_haproxy.sh&amp;quot; interval 2 weight 2 } vrrp_instance VI_1 { state MASTER nopreempt interface eth0 virtual_router_id 121 priority 60 lvs_sync_daemon_interface eth0 advert_int 1 authentication { auth_type PASS auth_pass adminyz } track_script { chk_haproxy } virtual_ipaddress { 10.</description>
    </item>
    
  </channel>
</rss>